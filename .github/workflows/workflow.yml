# name: Test github actions

# on: push

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     container:
#       image: node:latest
#       env:
#         NODE_ENV: development
#       ports:
#         - 80
#       volumes:
#         - ${{ github.workspace}}:/container
#       options: --cpus 1

#     steps:
#       - name: checkout the repo
#         uses: actions/checkout@v2
#       - name: Check for dockerenv file
#         run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      
#       - name: Open the backend and Install dependencies
#         run: cd container & npm i

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Get commit hash
#         id: get-commit-hash
#         run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
#       - name: Get timestamp
#         id: get-timestamp
#         run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"


#       - name: Build, tag, and push the image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#           IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


        
#       - name: Build the image
#         run: cd container & docker build -t my-node-app .

name: AWS Service CI/CD

on:
  push:
    branches: 
      - main
  # pull_request:
  #   branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install the CDK Dependency
        run: |
          npm install -g aws-cdk
      - name: Install other dependencies
        run: |
          npm install
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - name: Deploy to AWS
        run: cdk deploy CdkHelloWorldStack --require-approval=never
      
      - name: Retrieve ALB DNS name
        id: alb_dns
        run: |
          alb_name="eda-ecs-alb-eda"
          alb_dns=$(aws elbv2 describe-load-balancers --names $alb_name --query "LoadBalancers[0].DNSName" --output text)
          echo "ALB DNS: $alb_dns"
          echo "::set-output name=alb_dns::$alb_dns"
      # - name: Destroy stack
      #   run: cdk destroy CdkHelloWorldStack

      # Get the alb dns url and eccho in github actions
